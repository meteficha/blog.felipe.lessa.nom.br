<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Felipe Lessa &#187; Haskell</title>
	<atom:link href="http://blog.felipe.lessa.nom.br?feed=rss2&#038;cat=3" rel="self" type="application/rss+xml" />
	<link>http://blog.felipe.lessa.nom.br</link>
	<description>Some random blog posts</description>
	<lastBuildDate>Sat, 02 Jan 2016 18:10:42 +0000</lastBuildDate>
	<language>en-US</language>
		<sy:updatePeriod>hourly</sy:updatePeriod>
		<sy:updateFrequency>1</sy:updateFrequency>
	<generator>http://wordpress.org/?v=3.8.5</generator>
	<item>
		<title>Announcing serversession</title>
		<link>http://blog.felipe.lessa.nom.br/?p=153</link>
		<comments>http://blog.felipe.lessa.nom.br/?p=153#comments</comments>
		<pubDate>Sat, 02 Jan 2016 03:06:47 +0000</pubDate>
		<dc:creator><![CDATA[Felipe Lessa]]></dc:creator>
				<category><![CDATA[Haskell]]></category>

		<guid isPermaLink="false">http://blog.felipe.lessa.nom.br/?p=153</guid>
		<description><![CDATA[I&#8217;m pleased to announce the serversession family of packages. Background HTTP is a stateless protocol. Cookies are used to create sessions out of otherwise independent requests made by the browser to the server. There are many ways of managing sessions &#8230; <a href="http://blog.felipe.lessa.nom.br/?p=153">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>I&#8217;m pleased to announce the <a href="https://github.com/yesodweb/serversession" title="serversession's GitHub page"><strong>serversession family of packages</strong></a>.</p>
<h2> Background</h2>
<p>HTTP is a stateless protocol.  Cookies are used to create <strong>sessions</strong> out of otherwise independent requests made by the browser to the server.  There are many ways of managing sessions via cookies, but they can be mostly separated into two big camps:</p>
<dl>
<dt>Client-side sessions</dt>
<dd>The cookie data contains the session data.  For example, it could contain a shopper&#8217;s login and cart contents.</dd>
<dt>Server-side sessions</dt>
<dd>The cookie data contains a session identifier, and the session data is kept on a database indexed by the session identifiers.</dd>
</dl>
<p><span id="more-153"></span></p>
<p>The <a href="http://hackage.haskell.org/package/clientsession" title="clientsession package on Hackage">clientsession</a> package has existed for many years already.  It&#8217;s both <a href="http://hackage.haskell.org/package/yesod-core-1.4.18.1/docs/Yesod-Core.html#v:makeSessionBackend" title="Yesod.Core">Yesod</a>&#8216;s and <a href="http://hackage.haskell.org/package/snap-0.14.0.6/docs/Snap-Snaplet-Session-Backends-CookieSession.html" title="Snap.Snaplet.Session.Backends.CookieSession">Snap</a>&#8216;s de facto session backend.  It performs well and is battle tested by many different people and companies.</p>
<p>However, there are many reasons why one may want to favor server-side sessions over client-side ones:</p>
<ul>
<li>Saving <strong>arbitrary amounts of session data</strong> without being constrained by cookie size limits.  Even if your data fits on a cookie, you may want to spare having to bounce all that data around on every request and response.</li>
<li><strong>Securely invalidating a session</strong>.  User logout with client-side sessions erases the cookie from the user&#8217;s browser but doesn&#8217;t invalidate its data.  The old cookie is still valid until its expiration.  Server-side sessions, however, can be securely invalidate by simply erasing them from your session database.  This can be a critical feature depending on your needs.</li>
</ul>
<p>The biggest disadvantage of server-side sessions is that they need more server-side resources.  Not only it needs space for sessions storage, but it also incurs the overhead of zero to two DB transactions per HTTP request.</p>
<p>One solution isn&#8217;t inherently better than the other.  It all depends on your use case.  And if your use case needs server-side sessions, this is your lucky day.</p>
<h2> The serversession packages </h2>
<p>I&#8217;d like to fill the gap that currently exists on the Haskell ecosystem with respect to server-side session support.  Preferably once and for all.  That&#8217;s why there are many serversession packages.</p>
<p>The main one, aptly called <a href="https://hackage.haskell.org/package/serversession" title="serversession's page on Hackage"><strong>serversession</strong></a>, contains the core logic about server-side sessions.  It&#8217;s abstracted over a <strong>backend</strong> which will store the session&#8217;s data (usually a database).  And it&#8217;s meant to be used by a <strong>frontend</strong>, such as Yesod or Snap.  Besides having a nice <a href="https://travis-ci.org/yesodweb/serversession" title="serversession's page on Travis-CI">test suite</a>, it&#8217;s also unencumbered by the minutia of dealing with databases and thus is easier to review.  It also defines a standard test suite that every backend needs to pass.</p>
<p>Out-of-the-box you&#8217;ll find support for many different backends:</p>
<ul>
<li>The <a href="https://hackage.haskell.org/package/serversession-backend-persistent" title="serversession-backend-persistent's page on Hackage"><strong>serversession-backend-persistent</strong></a> package allows one to use any SQL database that persistent supports, including PostgreSQL, MySQL, and SQLite.</li>
<li>Through the <a href="https://hackage.haskell.org/package/serversession-backend-acid-state" title="serversession-backend-acid-state's page on Hackage"><strong>serversession-backend-acid-state</strong></a> package you may use <a href="https://hackage.haskell.org/package/acid-state" title="acid-state's page on Hackage">acid-state</a>. This backend keeps sessions in memory but provides ACID guarantees using a transaction log.</li>
<li>We also support Redis via the <a href="https://hackage.haskell.org/package/serversession-backend-redis" title="serversession-backend-redis's page on Hackage"><strong>serversession-backend-redis</strong></a> package.</li>
</ul>
<p>We also already officially support the most popular frontends:</p>
<ul>
<li>Yesod, through the <a href="https://hackage.haskell.org/package/serversession-frontend-yesod" title="serversession-frontend-yesod's page on Hackage"><strong>serversession-frontend-yesod</strong></a> package.  Provides a drop-in replacement for clientsession. </li>
<li>Snap, through the <a href="https://hackage.haskell.org/package/serversession-frontend-snap" title="serversession-frontend-snap's page on Hackage"><strong>serversession-frontend-snap</strong></a> package.  Also provides a drop-in replacement for clientsession. </li>
<li>Even plain WAI apps, through the <a href="https://hackage.haskell.org/package/serversession-frontend-wai" title="serversession-frontend-wai's page on Hackage"><strong>serversession-frontend-wai</strong></a> package.
</ul>
<p>Adding a new backend is very straightforward, specially because there&#8217;s already a test suite for free.  Adding a new frontend is a bit more complicated depending on how well your frontend&#8217;s concept of sessions maps to serversession&#8217;s.  If you&#8217;d like to support your favorite backend/frontend, please send your contributions back upstream so they become official packages as well!</p>
<h2> Usage example </h2>
<p>If you have an Yesod app, you&#8217;re probably using persistent.  Changing your app to support serversession is just a matter of setting up the session storage entities and changing Yesod&#8217;s default session backend (not to be confused with a serversession backend).</p>
<p>To setup the entities, you&#8217;ll have to teach persistent how to set them up on your database.  Please check <a href="http://www.stackage.org/package/serversession-backend-persistent" title="serversession-backend-persistent's page on Stackage">serversession-backend-persistent&#8217;s docs</a> for details, but it all boils down to changing your migration Template Haskell code from:</p>
<div class="codecolorer-container haskell default" style="overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;"><div class="haskell codecolorer" style="padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap"><span style="color: #5d478b; font-style: italic;">-- On Model.hs</span><br />
share <span style="color: green;">&#91;</span>mkPersist sqlSettings<span style="color: #339933; font-weight: bold;">,</span> mkMigrate <span style="background-color: #3cb371;">&quot;migrateAll&quot;</span><span style="color: green;">&#93;</span></div></div>
<p>to:</p>
<div class="codecolorer-container haskell default" style="overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;"><div class="haskell codecolorer" style="padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap"><span style="color: #5d478b; font-style: italic;">-- On Model.hs</span><br />
share <span style="color: green;">&#91;</span>mkPersist sqlSettings<span style="color: #339933; font-weight: bold;">,</span> mkSave <span style="background-color: #3cb371;">&quot;entityDefs&quot;</span><span style="color: green;">&#93;</span><br />
<br />
<span style="color: #5d478b; font-style: italic;">-- On Application.hs</span><br />
mkMigrate <span style="background-color: #3cb371;">&quot;migrateAll&quot;</span> <span style="color: green;">&#40;</span>serverSessionDefs <span style="color: green;">&#40;</span>Proxy <span style="color: #339933; font-weight: bold;">::</span> Proxy SessionMap<span style="color: green;">&#41;</span> <span style="color: #339933; font-weight: bold;">++</span> entityDefs<span style="color: green;">&#41;</span></div></div>
<p>Changing the default session backend is even easier.  Again, please read <a href="http://www.stackage.org/package/serversession-frontend-yesod" title="serversession-frontend-yesod's page on Stackage">the docs</a>, but you&#8217;ll just add the following to your <code class="codecolorer haskell default"><span class="haskell"><span style="color: #06c; font-weight: bold;">instance</span> Yesod App</span></code>:</p>
<div class="codecolorer-container haskell default" style="overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;"><div class="haskell codecolorer" style="padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap">&nbsp; &nbsp; makeSessionBackend <span style="color: #339933; font-weight: bold;">=</span> simpleBackend <span style="font-weight: bold;">id</span> <span style="color: #339933; font-weight: bold;">.</span> SqlStorage <span style="color: #339933; font-weight: bold;">.</span> appConnPool</div></div>
<p>And you&#8217;re set!  Please take a look at the <a href="https://github.com/yesodweb/serversession/tree/master/examples/serversession-example-yesod-persistent" title="Example project using serversession with Yesod and persistent on GitHub">included example project</a> to see how everything fits together.</p>
<h2>Final words</h2>
<p>One of clientsession&#8217;s biggest success was in being used by many different projects.  This is desirable both for reducing duplicate community efforts and for increasing the number of eyeballs over a security-related piece of code.  I&#8217;d like to make serversession equally successful in the same way, which is why it supports from the get-go both the major Haskell web frameworks that today use clientsession by default.</p>
<p>I&#8217;d like to invite your criticism and feedback.  And your success stories as well! </p>
<p>Happy New Year!</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.felipe.lessa.nom.br/?feed=rss2&#038;p=153</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Esqueleto now supports IN and EXISTS</title>
		<link>http://blog.felipe.lessa.nom.br/?p=83</link>
		<comments>http://blog.felipe.lessa.nom.br/?p=83#comments</comments>
		<pubDate>Thu, 29 Nov 2012 15:57:04 +0000</pubDate>
		<dc:creator><![CDATA[Felipe Lessa]]></dc:creator>
				<category><![CDATA[Haskell]]></category>

		<guid isPermaLink="false">http://blog.felipe.lessa.nom.br/?p=83</guid>
		<description><![CDATA[Since version 0.2.9 that I&#8217;ve just released, esqueleto supports IN and EXISTS operators (and their negated counterparts). For example: select $ from $ \person -&#62; do where_ $ exists $ &#160; &#160; &#160; &#160; &#160;from $ \post -&#62; do &#160; &#8230; <a href="http://blog.felipe.lessa.nom.br/?p=83">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>Since version 0.2.9 that I&#8217;ve just released, <a href="http://hackage.haskell.org/package/esqueleto">esqueleto</a> supports <code class="codecolorer sql default"><span class="sql"><span style="color: #993333; font-weight: bold;">IN</span></span></code> and <code class="codecolorer sql default"><span class="sql"><span style="color: #993333; font-weight: bold;">EXISTS</span></span></code> operators (and their negated counterparts).  For example:</p>
<div class="codecolorer-container haskell default" style="overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;"><div class="haskell codecolorer" style="padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap">select <span style="color: #339933; font-weight: bold;">$</span><br />
from <span style="color: #339933; font-weight: bold;">$</span> \person <span style="color: #339933; font-weight: bold;">-&gt;</span> <span style="color: #06c; font-weight: bold;">do</span><br />
where<span style="color: #339933; font-weight: bold;">_</span> <span style="color: #339933; font-weight: bold;">$</span> exists <span style="color: #339933; font-weight: bold;">$</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;from <span style="color: #339933; font-weight: bold;">$</span> \post <span style="color: #339933; font-weight: bold;">-&gt;</span> <span style="color: #06c; font-weight: bold;">do</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;where<span style="color: #339933; font-weight: bold;">_</span> <span style="color: green;">&#40;</span>post <span style="color: #339933; font-weight: bold;">^.</span> BlogPostAuthorId <span style="color: #339933; font-weight: bold;">==.</span> person <span style="color: #339933; font-weight: bold;">^.</span> PersonId<span style="color: green;">&#41;</span><br />
<span style="font-weight: bold;">return</span> person</div></div>
<p>Enjoy! =)</p>
<p>PS: I&#8217;ll try to post more in the future, so keep tuned =).</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.felipe.lessa.nom.br/?feed=rss2&#038;p=83</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>Announcing esqueleto, a type-safe EDSL for SQL queries</title>
		<link>http://blog.felipe.lessa.nom.br/?p=68</link>
		<comments>http://blog.felipe.lessa.nom.br/?p=68#comments</comments>
		<pubDate>Thu, 06 Sep 2012 22:51:09 +0000</pubDate>
		<dc:creator><![CDATA[Felipe Lessa]]></dc:creator>
				<category><![CDATA[Haskell]]></category>
		<category><![CDATA[EDSL]]></category>
		<category><![CDATA[esqueleto]]></category>
		<category><![CDATA[persistent]]></category>
		<category><![CDATA[SQL]]></category>
		<category><![CDATA[type-safe]]></category>
		<category><![CDATA[Yesod]]></category>

		<guid isPermaLink="false">http://blog.felipe.lessa.nom.br/?p=68</guid>
		<description><![CDATA[I&#8217;m very pleased to announce a preview release of esqueleto, a bare bones, type-safe EDSL for SQL queries. On the first part of this blog post I&#8217;ll talk about persistent and HaskellDB. You may jump right into where I talk &#8230; <a href="http://blog.felipe.lessa.nom.br/?p=68">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>I&#8217;m very pleased to announce a preview release of <a href="http://hackage.haskell.org/package/esqueleto">esqueleto</a>, a bare bones, type-safe EDSL for SQL queries.</p>
<p><span id="more-68"></span></p>
<p>On the first part of this blog post I&#8217;ll talk about persistent and HaskellDB.  You may jump <a href="#esqueleto">right into where I talk about esqueleto</a> if you want, though.</p>
<h2>Background</h2>
<p><a href="http://www.yesodweb.com/">Yesod</a> is very modular, and each of its components may be used separately.  You may also take libraries from other web frameworks.  However, it&#8217;s more convenient to use Yesod with its standard set of libraries.</p>
<p>One of those libraries is <a href="http://hackage.haskell.org/package/persistent">persistent</a>. It fills the role of communicating with the database: serialization and deserialization of data types, insertions, updates, queries, schema migration, and so on.  It currently has both SQL and NoSQL backends, such as <a href="http://hackage.haskell.org/package/persistent-mysql">persistent-mysql</a>, <a href="http://hackage.haskell.org/package/persistent-postgresql">persistent-postgresql</a>, <a href="http://hackage.haskell.org/package/persistent-sqlite">persistent-sqlite</a> and <a href="http://hackage.haskell.org/package/persistent-mongoDB">persistent-mongoDB</a>.</p>
<h2>Persistent&#8217;s weakness</h2>
<p>Even though persistent&#8217;s use of Template Haskell has been criticized by some, it&#8217;s almost consensual that its largest drawback lies on its query API.  For example, if you want to see all of John&#8217;s posts, and you know that John&#8217;s key on the database is <code class="codecolorer haskell default"><span class="haskell">johnId</span></code>, then you may write:</p>
<div class="codecolorer-container haskell default" style="overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;"><div class="haskell codecolorer" style="padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap">posts <span style="color: #339933; font-weight: bold;">&lt;-</span> selectList <span style="color: green;">&#91;</span>BlogPostAuthorId <span style="color: #339933; font-weight: bold;">==.</span> johnId<span style="color: green;">&#93;</span> <span style="color: green;">&#91;</span><span style="color: green;">&#93;</span></div></div>
<p>Even though the meaning of those lists is somewhat cryptic, it&#8217;s not a bad line of code.  However, what if you didn&#8217;t know John&#8217;s key, just its e-mail (assuming that there is an uniqueness constraint on e-mails)?  Unfortunately, with persistent you&#8217;ll need either two queries:</p>
<div class="codecolorer-container haskell default" style="overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;"><div class="haskell codecolorer" style="padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap">Entity johnId john <span style="color: #339933; font-weight: bold;">&lt;-</span> getBy <span style="color: green;">&#40;</span>UniqueEmail john'sEmail<span style="color: green;">&#41;</span><br />
posts <span style="color: #339933; font-weight: bold;">&lt;-</span> selectList <span style="color: green;">&#91;</span>BlogPostAuthorId <span style="color: #339933; font-weight: bold;">==.</span> johnId<span style="color: green;">&#93;</span> <span style="color: green;">&#91;</span><span style="color: green;">&#93;</span></div></div>
<p>Or you could do it in one query using the ad hoc <a href="http://hackage.haskell.org/packages/archive/persistent/1.0.1/doc/html/Database-Persist-Query-Join-Sql.html">Database.Persist.Query.Join.Sql</a> module:</p>
<div class="codecolorer-container haskell default" style="overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;"><div class="haskell codecolorer" style="padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap">runJoin <span style="color: #339933; font-weight: bold;">$</span> SelectOneMany<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: green;">&#123;</span> somFilterOne &nbsp; &nbsp; &nbsp;<span style="color: #339933; font-weight: bold;">=</span> <span style="color: green;">&#91;</span> PersonEmail <span style="color: #339933; font-weight: bold;">==.</span> john'sEmail <span style="color: green;">&#93;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #339933; font-weight: bold;">,</span> somOrderOne &nbsp; &nbsp; &nbsp; <span style="color: #339933; font-weight: bold;">=</span> <span style="color: green;">&#91;</span><span style="color: green;">&#93;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #339933; font-weight: bold;">,</span> somFilterMany &nbsp; &nbsp; <span style="color: #339933; font-weight: bold;">=</span> <span style="color: green;">&#91;</span><span style="color: green;">&#93;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #339933; font-weight: bold;">,</span> somOrderMany &nbsp; &nbsp; &nbsp;<span style="color: #339933; font-weight: bold;">=</span> <span style="color: green;">&#91;</span><span style="color: green;">&#93;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #339933; font-weight: bold;">,</span> somFilterKeys &nbsp; &nbsp; <span style="color: #339933; font-weight: bold;">=</span> <span style="color: green;">&#40;</span>BlogPostAuthorId <span style="color: #339933; font-weight: bold;">&lt;-.</span><span style="color: green;">&#41;</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #339933; font-weight: bold;">,</span> somGetKey &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #339933; font-weight: bold;">=</span> blogPostAuthorId<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #339933; font-weight: bold;">,</span> somIncludeNoMatch <span style="color: #339933; font-weight: bold;">=</span> False<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: green;">&#125;</span></div></div>
<p>Compare to the equivalent SQL query:</p>
<div class="codecolorer-container sql default" style="overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;"><div class="sql codecolorer" style="padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap"><span style="color: #993333; font-weight: bold;">SELECT</span> BlogPost<span style="color: #66cc66;">.*</span><br />
<span style="color: #993333; font-weight: bold;">FROM</span> Person <span style="color: #993333; font-weight: bold;">INNER</span> <span style="color: #993333; font-weight: bold;">JOIN</span> BlogPost<br />
<span style="color: #993333; font-weight: bold;">ON</span> Person<span style="color: #66cc66;">.</span>id <span style="color: #66cc66;">=</span> BlogPost<span style="color: #66cc66;">.</span>authorId<br />
<span style="color: #993333; font-weight: bold;">WHERE</span> Person<span style="color: #66cc66;">.</span>email <span style="color: #66cc66;">=</span> ?</div></div>
<p>But it gets even worse: you have support only for simple queries (using <code class="codecolorer haskell default"><span class="haskell">selectList</span></code>) and for simple one-to-many joins (using the ad hoc <code class="codecolorer haskell default"><span class="haskell">SelectOneMany</span></code>).  If you need anything else then you&#8217;re on your own.  For instance, there&#8217;s no support for doing many-to-many joins.</p>
<p>For these reasons I&#8217;ve created the <a href="http://hackage.haskell.org/packages/archive/persistent/1.0.1/doc/html/Database-Persist-GenericSql.html#v:rawSql"><code class="codecolorer haskell default"><span class="haskell">rawSql</span></code></a> function <a href="https://github.com/yesodweb/persistent/pull/34">8 month ago</a>.  It was nice to be able to write raw SQL queries and still be able to use persistent to deserialize the results, but we still get all the drawbacks of using raw SQL queries:</p>
<ul>
<li>No compile-time checks whatsoever.  You could alleviate this problem using <a href="http://hackage.haskell.org/package/hssqlppp">hssqlppp</a>, for example, but you&#8217;d still not get compile-time checks for the types of your entities&#8212;there would still be plenty of ways of shooting yourself in the foot.</li>
<li>No composability.  Suppose you have a query for people and their latest blog post.  You can&#8217;t reuse this query to reorder the results or filter them.</li>
<li>Zero coolness factor.  C&#8217;mon, we&#8217;re not using Haskell for nothing! =)</li>
</ul>
<h2>HaskellDB: a solution?</h2>
<p><a href="http://hackage.haskell.org/package/haskelldb">HaskellDB</a> is a type-safe EDSL that allows you to write SQL queries using relational algebra.  It&#8217;s as old as Parsec, having been introduced in 1999!</p>
<p>Recently some people have been showing interest in using it with Yesod.  Last month <a href="https://groups.google.com/d/msg/yesodweb/nQjQuwydfI8/vB9mM47uZ0AJ">Mats Rauhala</a> wrote the following summary about his opinion at the time on Yesod&#8217;s mailing list:</p>
<blockquote><p>
1. Direct sql<br />
  &#8211; No, or very little type safety<br />
  &#8211; No, or very little compile time checks<br />
  &#8211; Raw queries are ugly<br />
  + Full power of SQL</p>
<p>2. ORM<br />
  + Type safety (ala persistent)<br />
  &#8211; No control over queries<br />
  &#8211; No proper join support(?, persistent)<br />
  + Abstract<br />
  +- High-level</p>
<p>3. Relational algebra<br />
  + Type safety (ala HaskellDB)<br />
  + Great control over queries<br />
  + Good control over abstractions<br />
  + It&#8217;s algebra, therefore fits Haskell (tongue in cheek)<br />
  &#8211; Forgotten (HaskellDB)
</p></blockquote>
<p>Although it&#8217;s rather painful to setup HaskellDB&#8217;s tables, I&#8217;ll won&#8217;t count that as a big drawback since some Template Haskell could certainly solve this shortcoming.  Its lack of migration capabilities is not a huge problem, too, since you may use persistent just for the migrations (although I&#8217;m not sure if anyone has ever put something like this into production).</p>
<p>HaskellDB&#8217;s biggest drawback is being a relational algebra library.  &#8220;What?&#8221;, I hear you say.  I like relational algebra as much as the next functional programmer, but it comes with two drawbacks, one of them being a major one:</p>
<ol>
<li>Being something different than what we&#8217;re used to means that it takes some time to learn how to use it and get productive.  This is a minor drawback, but nevertheless it is a drawback.</li>
<li>However, the biggest drawback is that <strong>it&#8217;s very hard to map into efficient SQL</strong>.  Back in 2008, Geoff Wilson <a href="http://pseudofish.com/blog/2008/05/18/haskelldb-performance/">wrote a blog post about HaskellDB&#8217;s performance</a>.  A simple <code class="codecolorer sql default"><span class="sql"><span style="color: #993333; font-weight: bold;">INNER</span> <span style="color: #993333; font-weight: bold;">JOIN</span></span></code> was taking between 40x and <strong>160x</strong> more time to execute when using HaskellDB and comparing against a handwritten SQL query.</li>
</ol>
<p>While I&#8217;m sure that some work has been done on HaskellDB&#8217;s optimizer since that blog post, Chris Done <a href="http://chrisdone.com/posts/2011-11-06-haskelldb-tutorial.html">found out last November</a> that it still isn&#8217;t very good:</p>
<blockquote><p>
Don’t expect good performance from HaskellDB if you’re using MySQL.
</p></blockquote>
<p>Even if I started using PostgreSQL, I wouldn&#8217;t want to rely on its optimizer when doing, say, a join between five tables on HaskellDB.  (If you didn&#8217;t already know, I&#8217;m <a href="http://hackage.haskell.org/package/persistent-mysql">persistent-mysql</a>&#8216;s author.)</p>
<p>Please don&#8217;t get me wrong, HaskellDB is amazing!  But it won&#8217;t work for my production systems.</p>
<p><a name="esqueleto"></a></p>
<h2>Esqueleto rises</h2>
<p>Last Sunday my co-worker was bitten by a nasty bug due to a raw SQL query.  He changed an entity&#8217;s field so that it would be optional.  After fixing all type errors, he found out that some parts of the application were not working, but no error messages were to be found anywhere.  Turns out an implicit join in a raw SQL query started dropping rows from the result since the value was <code class="codecolorer sql default"><span class="sql"><span style="color: #993333; font-weight: bold;">NULL</span></span></code>.  After we found the bug, he proceeded to show me <a href="http://squeryl.org/">Squeryl</a>. My initial thought after seeing the examples was: how could I write this in Haskell?</p>
<p>Thus <a href="http://hackage.haskell.org/package/esqueleto">esqueleto</a> was born.  It&#8217;s a bare bones, type-safe EDSL for SQL-queries. Like HaskellDB, it has composable, type-checked queries.  Unlike HaskellDB, it&#8217;s not relational algebra, it&#8217;s SQL.  I was inspired by Squeryl but created esqueleto from scratch.</p>
<p>It sits on top of persistent and requires no further setup: if you&#8217;re already using persistent then you already have everything it takes to use esqueleto.  Although I haven&#8217;t tested, yet, it should work on any SQL backend.</p>
<p>Let&#8217;s remember the first query we did on the beginning of this post:</p>
<div class="codecolorer-container haskell default" style="overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;"><div class="haskell codecolorer" style="padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap">selectList <span style="color: green;">&#91;</span>BlogPostAuthorId <span style="color: #339933; font-weight: bold;">==.</span> johnId<span style="color: green;">&#93;</span> <span style="color: green;">&#91;</span><span style="color: green;">&#93;</span></div></div>
<p>You could write the same query in plain SQL as:</p>
<div class="codecolorer-container sql default" style="overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;"><div class="sql codecolorer" style="padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap"><span style="color: #993333; font-weight: bold;">SELECT</span> BlogPost<span style="color: #66cc66;">.*</span><br />
<span style="color: #993333; font-weight: bold;">FROM</span> BlogPost<br />
<span style="color: #993333; font-weight: bold;">WHERE</span> BlogPost<span style="color: #66cc66;">.</span>authorId <span style="color: #66cc66;">=</span> ?</div></div>
<p>With esqueleto, you may say:</p>
<div class="codecolorer-container haskell default" style="overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;"><div class="haskell codecolorer" style="padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap">select <span style="color: #339933; font-weight: bold;">$</span><br />
from <span style="color: #339933; font-weight: bold;">$</span> \b <span style="color: #339933; font-weight: bold;">-&gt;</span> <span style="color: #06c; font-weight: bold;">do</span><br />
where<span style="color: #339933; font-weight: bold;">_</span> <span style="color: green;">&#40;</span>b <span style="color: #339933; font-weight: bold;">^.</span> BlogPostAuthorId <span style="color: #339933; font-weight: bold;">==.</span> val johnId<span style="color: green;">&#41;</span><br />
<span style="font-weight: bold;">return</span> b</div></div>
<p>Arguably more verbose than persistent&#8217;s <code class="codecolorer haskell default"><span class="haskell">selectList</span></code>, but extremely close to the handwriten SQL: just take the <code class="codecolorer haskell default"><span class="haskell"><span style="font-weight: bold;">return</span></span></code> and move it to the top!</p>
<p>Better still, the SQL that esqueleto generates is:</p>
<div class="codecolorer-container sql default" style="overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;"><div class="sql codecolorer" style="padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap"><span style="color: #993333; font-weight: bold;">SELECT</span> BlogPost<span style="color: #66cc66;">.</span>id<span style="color: #66cc66;">,</span> BlogPost<span style="color: #66cc66;">.</span>title<br />
<span style="color: #993333; font-weight: bold;">FROM</span> BlogPost<br />
<span style="color: #993333; font-weight: bold;">WHERE</span> BlogPost<span style="color: #66cc66;">.</span>authorId <span style="color: #66cc66;">=</span> ?</div></div>
<p>I&#8217;m not kidding!  The only difference from the handwritten query is the explicit list of columns, which is needed for correctness (the order your database returns the columns may not be what persistent expects).</p>
<p>Remember the one-to-many join?  Here&#8217;s the esqueleto version:</p>
<div class="codecolorer-container haskell default" style="overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;"><div class="haskell codecolorer" style="padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap">select <span style="color: #339933; font-weight: bold;">$</span><br />
from <span style="color: #339933; font-weight: bold;">$</span> \<span style="color: green;">&#40;</span>p `InnerJoin` b<span style="color: green;">&#41;</span> <span style="color: #339933; font-weight: bold;">-&gt;</span> <span style="color: #06c; font-weight: bold;">do</span><br />
on <span style="color: green;">&#40;</span>p <span style="color: #339933; font-weight: bold;">^.</span> PersonId <span style="color: #339933; font-weight: bold;">==.</span> b <span style="color: #339933; font-weight: bold;">^.</span> BlogPostAuthorId<span style="color: green;">&#41;</span><br />
where<span style="color: #339933; font-weight: bold;">_</span> <span style="color: green;">&#40;</span>p <span style="color: #339933; font-weight: bold;">^.</span> PersonEmail <span style="color: #339933; font-weight: bold;">==.</span> val john'sEmail<span style="color: green;">&#41;</span><br />
<span style="font-weight: bold;">return</span> b</div></div>
<p>The SQL esqueleto generates for this query is:</p>
<div class="codecolorer-container sql default" style="overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;"><div class="sql codecolorer" style="padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap"><span style="color: #993333; font-weight: bold;">SELECT</span> BlogPost<span style="color: #66cc66;">.</span>id<span style="color: #66cc66;">,</span> BlogPost<span style="color: #66cc66;">.</span>title<br />
<span style="color: #993333; font-weight: bold;">FROM</span> Person <span style="color: #993333; font-weight: bold;">INNER</span> <span style="color: #993333; font-weight: bold;">JOIN</span> BlogPost<br />
<span style="color: #993333; font-weight: bold;">ON</span> Person<span style="color: #66cc66;">.</span>id <span style="color: #66cc66;">=</span> BlogPost<span style="color: #66cc66;">.</span>authorId<br />
<span style="color: #993333; font-weight: bold;">WHERE</span> Person<span style="color: #66cc66;">.</span>email <span style="color: #66cc66;">=</span> ?</div></div>
<p>Let&#8217;s take <a href="http://pseudofish.com/blog/2008/05/18/haskelldb-performance/">Geoff Wilson&#8217;s post</a> as an example again.  Since this is a preview release of esqueleto, it does not have support for <code class="codecolorer sql default"><span class="sql"><span style="color: #993333; font-weight: bold;">IN</span></span></code> yet, so I&#8217;ll rewrite his code slightly. The HaskellDB code he wrote was:</p>
<div class="codecolorer-container haskell default" style="overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;"><div class="haskell codecolorer" style="padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap">query db <span style="color: #339933; font-weight: bold;">$</span> <span style="color: #06c; font-weight: bold;">do</span><br />
&nbsp; s <span style="color: #339933; font-weight: bold;">&lt;-</span> table S<span style="color: #339933; font-weight: bold;">.</span>stock<br />
&nbsp; e <span style="color: #339933; font-weight: bold;">&lt;-</span> table E<span style="color: #339933; font-weight: bold;">.</span>end<span style="color: #339933; font-weight: bold;">_</span>of<span style="color: #339933; font-weight: bold;">_</span>day<br />
&nbsp; restrict <span style="color: green;">&#40;</span>s<span style="color: #339933; font-weight: bold;">!</span>S<span style="color: #339933; font-weight: bold;">.</span>stock<span style="color: #339933; font-weight: bold;">_</span>id <span style="color: #339933; font-weight: bold;">.==.</span> e<span style="color: #339933; font-weight: bold;">!</span>E<span style="color: #339933; font-weight: bold;">.</span>stock<span style="color: #339933; font-weight: bold;">_</span>id <span style="color: #339933; font-weight: bold;">.&amp;&amp;.</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; s<span style="color: #339933; font-weight: bold;">!</span>S<span style="color: #339933; font-weight: bold;">.</span>ticker <span style="color: #339933; font-weight: bold;">.==.</span> constant ticker <span style="color: #339933; font-weight: bold;">.&amp;&amp;.</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e<span style="color: #339933; font-weight: bold;">!</span>E<span style="color: #339933; font-weight: bold;">.</span>trade<span style="color: #339933; font-weight: bold;">_</span>date <span style="color: #339933; font-weight: bold;">.==.</span> constant stockDate<span style="color: green;">&#41;</span><br />
&nbsp; r <span style="color: #339933; font-weight: bold;">&lt;-</span> project <span style="color: green;">&#40;</span>closing<span style="color: #339933; font-weight: bold;">_</span>price <span style="color: #339933; font-weight: bold;">&lt;&lt;</span> e<span style="color: #339933; font-weight: bold;">!</span>E<span style="color: #339933; font-weight: bold;">.</span>closing<span style="color: #339933; font-weight: bold;">_</span>price #<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; trade<span style="color: #339933; font-weight: bold;">_</span>date &nbsp; &nbsp;<span style="color: #339933; font-weight: bold;">&lt;&lt;</span> e<span style="color: #339933; font-weight: bold;">!</span>E<span style="color: #339933; font-weight: bold;">.</span>trade<span style="color: #339933; font-weight: bold;">_</span>date<span style="color: green;">&#41;</span><br />
&nbsp; <span style="font-weight: bold;">return</span> r</div></div>
<p>The SQL that HaskellDB generated on 2008 was (adapted):</p>
<div class="codecolorer-container sql default" style="overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;"><div class="sql codecolorer" style="padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap"><span style="color: #993333; font-weight: bold;">SELECT</span> closing_price2 <span style="color: #993333; font-weight: bold;">AS</span> closing_price<span style="color: #66cc66;">,</span><br />
&nbsp; &nbsp; &nbsp; &nbsp;trade_date2 <span style="color: #993333; font-weight: bold;">AS</span> trade_date<br />
<span style="color: #993333; font-weight: bold;">FROM</span> <span style="color: #66cc66;">&#40;</span><span style="color: #993333; font-weight: bold;">SELECT</span> stock_id <span style="color: #993333; font-weight: bold;">AS</span> stock_id2<span style="color: #66cc66;">,</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;trade_date <span style="color: #993333; font-weight: bold;">AS</span> trade_date2<span style="color: #66cc66;">,</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;closing_price <span style="color: #993333; font-weight: bold;">AS</span> closing_price2<br />
&nbsp; &nbsp; &nbsp; <span style="color: #993333; font-weight: bold;">FROM</span> end_of_day <span style="color: #993333; font-weight: bold;">AS</span> T1<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">AS</span> T1<span style="color: #66cc66;">,</span><br />
&nbsp; &nbsp; &nbsp;<span style="color: #66cc66;">&#40;</span><span style="color: #993333; font-weight: bold;">SELECT</span> stock_id <span style="color: #993333; font-weight: bold;">AS</span> stock_id1<span style="color: #66cc66;">,</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ticker <span style="color: #993333; font-weight: bold;">AS</span> ticker1<br />
&nbsp; &nbsp; &nbsp; <span style="color: #993333; font-weight: bold;">FROM</span> stock <span style="color: #993333; font-weight: bold;">AS</span> T1<span style="color: #66cc66;">&#41;</span> <span style="color: #993333; font-weight: bold;">AS</span> T2<br />
<span style="color: #993333; font-weight: bold;">WHERE</span> stock_id1 <span style="color: #66cc66;">=</span> stock_id2<br />
&nbsp; <span style="color: #993333; font-weight: bold;">AND</span> ticker1 <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">'FXJ'</span><br />
&nbsp; <span style="color: #993333; font-weight: bold;">AND</span> trade_date2 <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">'2008-02-14 00:00:00'</span>;</div></div>
<p>His handwritten SQL was (adapted as well):</p>
<div class="codecolorer-container sql default" style="overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;"><div class="sql codecolorer" style="padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap"><span style="color: #993333; font-weight: bold;">SELECT</span> e<span style="color: #66cc66;">.</span>closing_price <span style="color: #993333; font-weight: bold;">AS</span> closing_price<span style="color: #66cc66;">,</span><br />
&nbsp; &nbsp; &nbsp; &nbsp;e<span style="color: #66cc66;">.</span>trade_date <span style="color: #993333; font-weight: bold;">AS</span> trade_date<br />
<span style="color: #993333; font-weight: bold;">FROM</span><br />
&nbsp; &nbsp; stock s<span style="color: #66cc66;">,</span> end_of_day e<br />
<span style="color: #993333; font-weight: bold;">WHERE</span><br />
&nbsp; &nbsp; s<span style="color: #66cc66;">.</span>stock_id <span style="color: #66cc66;">=</span> e<span style="color: #66cc66;">.</span>stock_id<br />
&nbsp; &nbsp; <span style="color: #993333; font-weight: bold;">AND</span> s<span style="color: #66cc66;">.</span>ticker <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">'FXJ'</span><br />
&nbsp; &nbsp; <span style="color: #993333; font-weight: bold;">AND</span> e<span style="color: #66cc66;">.</span>trade_date <span style="color: #66cc66;">=</span> <span style="color: #ff0000;">'2008-02-14 00:00:00'</span>;</div></div>
<p>The same query could be written using persistent and esqueleto as:</p>
<div class="codecolorer-container haskell default" style="overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;"><div class="haskell codecolorer" style="padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap">select <span style="color: #339933; font-weight: bold;">$</span><br />
from <span style="color: #339933; font-weight: bold;">$</span> \<span style="color: green;">&#40;</span>s<span style="color: #339933; font-weight: bold;">,</span> e<span style="color: green;">&#41;</span> <span style="color: #339933; font-weight: bold;">-&gt;</span> <span style="color: #06c; font-weight: bold;">do</span><br />
where<span style="color: #339933; font-weight: bold;">_</span> <span style="color: green;">&#40;</span>s <span style="color: #339933; font-weight: bold;">^.</span> StockId <span style="color: #339933; font-weight: bold;">==.</span> e <span style="color: #339933; font-weight: bold;">^.</span> EndOfDayStockId <span style="color: #339933; font-weight: bold;">&amp;&amp;.</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; s <span style="color: #339933; font-weight: bold;">^.</span> StockTicker <span style="color: #339933; font-weight: bold;">==.</span> val ticker <span style="color: #339933; font-weight: bold;">&amp;&amp;.</span><br />
&nbsp; &nbsp; &nbsp; &nbsp; s <span style="color: #339933; font-weight: bold;">^.</span> EndOfDayTradeDate <span style="color: #339933; font-weight: bold;">==.</span> val stockDate<span style="color: green;">&#41;</span><br />
<span style="font-weight: bold;">return</span> <span style="color: green;">&#40;</span>e <span style="color: #339933; font-weight: bold;">^.</span> EndOfDayClosingPrice<span style="color: #339933; font-weight: bold;">,</span> e <span style="color: #339933; font-weight: bold;">^.</span> EndOfDayTradeDate<span style="color: green;">&#41;</span></div></div>
<p>The generated SQL would be:</p>
<div class="codecolorer-container sql default" style="overflow:auto;white-space:nowrap;border:1px solid #9F9F9F;"><div class="sql codecolorer" style="padding:5px;font:normal 12px/1.4em Monaco, Lucida Console, monospace;white-space:nowrap"><span style="color: #993333; font-weight: bold;">SELECT</span> end_of_day<span style="color: #66cc66;">.</span>closing_price<span style="color: #66cc66;">,</span> end_of_day<span style="color: #66cc66;">.</span>trade_date<br />
<span style="color: #993333; font-weight: bold;">FROM</span> stock<span style="color: #66cc66;">,</span> end_of_day<br />
<span style="color: #993333; font-weight: bold;">WHERE</span> stock<span style="color: #66cc66;">.</span>stock_id <span style="color: #66cc66;">=</span> end_of_day<span style="color: #66cc66;">.</span>stock_id <span style="color: #993333; font-weight: bold;">AND</span> <span style="color: #66cc66;">&#40;</span>stock<span style="color: #66cc66;">.</span>ticker <span style="color: #66cc66;">=</span> ? <span style="color: #993333; font-weight: bold;">AND</span> end_of_day<span style="color: #66cc66;">.</span>trade_date <span style="color: #66cc66;">=</span> ?<span style="color: #66cc66;">&#41;</span></div></div>
<h2>Conclusion</h2>
<p>The full power of raw SQL.  Type-checked queries, no type signatures required.  Complete control over the resulting SQL.  The robustness and performance of persistent.  And with only 800 source lines of code (+ 400 SLOC for the test suite).  What&#8217;s not to like about esqueleto? =D</p>
<p>This is just a preview release.  I&#8217;m eager to hear what you have to say about it.  Send pull requests, open issues, comment about it <a href="http://www.reddit.com/r/haskell/comments/zh3h6/announcing_esqueleto_a_typesafe_edsl_for_sql/">on reddit</a> or send e-mails to Yesod&#8217;s mailing list.  Or, even better, give it a spin a let me know how it went!  Its <a href="http://hackage.haskell.org/packages/archive/esqueleto/latest/doc/html/Database-Esqueleto.html">Haddock documentation</a> should get you started.</p>
<p>Thanks for reading this rather long blog post! =)</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.felipe.lessa.nom.br/?feed=rss2&#038;p=68</wfw:commentRss>
		<slash:comments>7</slash:comments>
		</item>
	</channel>
</rss>
